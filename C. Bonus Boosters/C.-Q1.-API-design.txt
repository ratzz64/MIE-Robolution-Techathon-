Q1.Design a restful API for order placement that handles high concurrency without errors, detailing endpoints, request/response formats, and concurrency controls.
	Answer:
	
Design Overview-->
Designing an overview we need to keep focus on 
	i.Accepting Multiple order simultaneously.
	ii.Doesn't lose data./
	iii.Handles concurrency correctly meaning no duplication and no corruption of data.
	
Fixing Endpoints:
POST --/api/orders    			         to place a new order
GET -- /api/orders/{id_order}            to retrieve specific order details
GET -- /api/orders/{id_table}            to retreive orders by table
POST -- /api/orders/{it_order}/cancel    to cancel an existing order

1. POST    /api/orders
****Request****
	{
		"table_id": 26,
		"items": [
			{"item_id": 101, "quantity": 2},
			{"item_id": 205, "quantity": 1}
		],
			"special_instructions": "No onions in the burger/extra cheese/hold the pickle etc"
	}
****Response****
	{
		"status": "success",
		"order_id": "ORD20250426***",
		"message": "Order placed successfully."
	}
2.GET 	/api/orders/{id_order}
***Request***
Not required
***Response***
	{
		"order_id": "ORD20250426***",
		"table_id": 5,
		"items": [
			{"item_id": 101, "quantity": 2},
			{"item_id": 205, "quantity": 1}
		],
		"status": "preparing",
		"timestamp": "2025-04-26T19:35:00Z"
	}

For Concurrency  controls
	1.We could use database transactions with isolation levels such as SERIALIZABLE ro 	REPEATABLE READ
	2.We could implement idempotency keys
	3.Multiple servers for queue incoming orders temporarily